/**
 * twitter-api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2019-10-21T21:52:33Z
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');


const defaultBasePath = 'https://hpbubuiaz6.execute-api.us-east-1.amazonaws.com/prod';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
const primitives = [
                    'string',
                    'boolean',
                    'double',
                    'integer',
                    'long',
                    'float',
                    'number',
                    'any'
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data === undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === 'Date') {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            const discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty === null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data === undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf('Array<', 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            const transformedData: any[] = [];
            for (const index in data) {
                const date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === 'Date') {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            const attributeTypes = typeMap[type].getAttributeTypeMap();
            const instance: {[index: string]: any} = {};
            for (const index in attributeTypes) {
                const attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data === undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf('Array<', 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            const transformedData: any[] = [];
            for (const index in data) {
                const date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === 'Date') {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            const instance = new typeMap[type]();
            const attributeTypes = typeMap[type].getAttributeTypeMap();
            for (const index in attributeTypes) {
                const attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class Empty {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return Empty.attributeTypeMap;
    }
}

export class FeedResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return FeedResponse.attributeTypeMap;
    }
}

export class FollowersResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return FollowersResponse.attributeTypeMap;
    }
}

export class FollowingResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return FollowingResponse.attributeTypeMap;
    }
}

export class IsFollowingResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'isFollowing',
            baseName: 'isFollowing',
            type: 'string'
        }    ];
    /**
    * Boolean of the follow in question
    */
    'isFollowing'?: string;

    static getAttributeTypeMap() {
        return IsFollowingResponse.attributeTypeMap;
    }
}

export class PostStatusRequest {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'message',
            baseName: 'message',
            type: 'string'
        },
        {
            name: 'attachmentSrc',
            baseName: 'attachmentSrc',
            type: 'string'
        },
        {
            name: 'ownerHandle',
            baseName: 'ownerHandle',
            type: 'string'
        },
        {
            name: 'date',
            baseName: 'date',
            type: 'string'
        },
        {
            name: 'id',
            baseName: 'id',
            type: 'string'
        }    ];
    /**
    * The status message
    */
    'message'?: string;
    /**
    * The status attachmentSrc
    */
    'attachmentSrc'?: string;
    /**
    * The status ownerHandle
    */
    'ownerHandle'?: string;
    /**
    * The status date
    */
    'date'?: string;
    /**
    * The status id
    */
    'id'?: string;

    static getAttributeTypeMap() {
        return PostStatusRequest.attributeTypeMap;
    }
}

export class ProfileResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'src',
            baseName: 'src',
            type: 'string'
        }    ];
    /**
    * The profile src
    */
    'src'?: string;

    static getAttributeTypeMap() {
        return ProfileResponse.attributeTypeMap;
    }
}

export class Response {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'message',
            baseName: 'message',
            type: 'string'
        }    ];
    /**
    * Operation status message
    */
    'message'?: string;

    static getAttributeTypeMap() {
        return Response.attributeTypeMap;
    }
}

export class SignupRequest {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'handle',
            baseName: 'handle',
            type: 'string'
        },
        {
            name: 'password',
            baseName: 'password',
            type: 'string'
        },
        {
            name: 'name',
            baseName: 'name',
            type: 'string'
        }    ];
    /**
    * The user handle
    */
    'handle'?: string;
    /**
    * The user password
    */
    'password'?: string;
    /**
    * The user full name
    */
    'name'?: string;

    static getAttributeTypeMap() {
        return SignupRequest.attributeTypeMap;
    }
}

export class StatusResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'message',
            baseName: 'message',
            type: 'string'
        },
        {
            name: 'attachmentSrc',
            baseName: 'attachmentSrc',
            type: 'string'
        },
        {
            name: 'ownerHandle',
            baseName: 'ownerHandle',
            type: 'string'
        },
        {
            name: 'date',
            baseName: 'date',
            type: 'string'
        },
        {
            name: 'id',
            baseName: 'id',
            type: 'string'
        }    ];
    /**
    * The status message
    */
    'message'?: string;
    /**
    * The status attachmentSrc
    */
    'attachmentSrc'?: string;
    /**
    * The status ownerHandle
    */
    'ownerHandle'?: string;
    /**
    * The status date
    */
    'date'?: string;
    /**
    * The status id
    */
    'id'?: string;

    static getAttributeTypeMap() {
        return StatusResponse.attributeTypeMap;
    }
}

export class StoryResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return StoryResponse.attributeTypeMap;
    }
}

export class UpdateProfileRequest {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'handle',
            baseName: 'handle',
            type: 'string'
        },
        {
            name: 'src',
            baseName: 'src',
            type: 'string'
        }    ];
    /**
    * The profile user handle
    */
    'handle'?: string;
    /**
    * The profile src
    */
    'src'?: string;

    static getAttributeTypeMap() {
        return UpdateProfileRequest.attributeTypeMap;
    }
}

export class UserResponse {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            name: 'handle',
            baseName: 'handle',
            type: 'string'
        },
        {
            name: 'name',
            baseName: 'name',
            type: 'string'
        },
        {
            name: 'password',
            baseName: 'password',
            type: 'string'
        }    ];
    /**
    * The user handle
    */
    'handle'?: string;
    /**
    * The user full name
    */
    'name'?: string;
    /**
    * The user password
    */
    'password'?: string;

    static getAttributeTypeMap() {
        return UserResponse.attributeTypeMap;
    }
}


const enumsMap: {[index: string]: any} = {
};

const typeMap: {[index: string]: any} = {
    Empty,
    FeedResponse,
    FollowersResponse,
    FollowingResponse,
    IsFollowingResponse,
    PostStatusRequest,
    ProfileResponse,
    Response,
    SignupRequest,
    StatusResponse,
    StoryResponse,
    UpdateProfileRequest,
    UserResponse,
};

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username = '';
    public password = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location === 'query') {
            (requestOptions.qs as any)[this.paramName] = this.apiKey;
        } else if (this.location === 'header' && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers.Authorization = 'Bearer ' + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username = '';
    public password = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders: any = {};
    protected _useQuerystring = false;

    protected authentications = {
        default: new VoidAuth() as Authentication,
    };

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public followOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/follow';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param followHandle
     * @param userHandle
     * @param {*} [options] Override http request options.
     */
    public followUserHandleFollowHandleGet(followHandle: string, userHandle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: IsFollowingResponse;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}/{followHandle}'
            .replace('{' + 'followHandle' + '}', encodeURIComponent(String(followHandle)))
            .replace('{' + 'userHandle' + '}', encodeURIComponent(String(userHandle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'followHandle' is not null or undefined
        if (followHandle === null || followHandle === undefined) {
            throw new Error('Required parameter followHandle was null or undefined when calling followUserHandleFollowHandleGet.');
        }

        // verify required parameter 'userHandle' is not null or undefined
        if (userHandle === null || userHandle === undefined) {
            throw new Error('Required parameter userHandle was null or undefined when calling followUserHandleFollowHandleGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: IsFollowingResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'IsFollowingResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public followUserHandleFollowHandleOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}/{followHandle}';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param followHandle
     * @param userHandle
     * @param {*} [options] Override http request options.
     */
    public followUserHandleFollowHandlePost(followHandle: string, userHandle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: Response;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}/{followHandle}'
            .replace('{' + 'followHandle' + '}', encodeURIComponent(String(followHandle)))
            .replace('{' + 'userHandle' + '}', encodeURIComponent(String(userHandle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'followHandle' is not null or undefined
        if (followHandle === null || followHandle === undefined) {
            throw new Error('Required parameter followHandle was null or undefined when calling followUserHandleFollowHandlePost.');
        }

        // verify required parameter 'userHandle' is not null or undefined
        if (userHandle === null || userHandle === undefined) {
            throw new Error('Required parameter userHandle was null or undefined when calling followUserHandleFollowHandlePost.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Response;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Response');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public followUserHandleFollowHandleUnfollowOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}/{followHandle}/unfollow';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param followHandle
     * @param userHandle
     * @param {*} [options] Override http request options.
     */
    public followUserHandleFollowHandleUnfollowPost(followHandle: string, userHandle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: Response;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}/{followHandle}/unfollow'
            .replace('{' + 'followHandle' + '}', encodeURIComponent(String(followHandle)))
            .replace('{' + 'userHandle' + '}', encodeURIComponent(String(userHandle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'followHandle' is not null or undefined
        if (followHandle === null || followHandle === undefined) {
            throw new Error('Required parameter followHandle was null or undefined when calling followUserHandleFollowHandleUnfollowPost.');
        }

        // verify required parameter 'userHandle' is not null or undefined
        if (userHandle === null || userHandle === undefined) {
            throw new Error('Required parameter userHandle was null or undefined when calling followUserHandleFollowHandleUnfollowPost.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Response;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Response');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public followUserHandleOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/follow/{userHandle}';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public statusesOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/statuses';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public statusesPostOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/statuses/post';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param postStatusRequest
     * @param {*} [options] Override http request options.
     */
    public statusesPostPost(postStatusRequest: PostStatusRequest, options: any = {}): Promise<{ response: http.IncomingMessage; body: Response;  }> {
        const localVarPath = this.basePath + '/statuses/post';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'postStatusRequest' is not null or undefined
        if (postStatusRequest === null || postStatusRequest === undefined) {
            throw new Error('Required parameter postStatusRequest was null or undefined when calling statusesPostPost.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(postStatusRequest, 'PostStatusRequest')
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Response;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Response');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param statusId
     * @param {*} [options] Override http request options.
     */
    public statusesStatusIdGet(statusId: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: StatusResponse;  }> {
        const localVarPath = this.basePath + '/statuses/{statusId}'
            .replace('{' + 'statusId' + '}', encodeURIComponent(String(statusId)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'statusId' is not null or undefined
        if (statusId === null || statusId === undefined) {
            throw new Error('Required parameter statusId was null or undefined when calling statusesStatusIdGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: StatusResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'StatusResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public statusesStatusIdOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/statuses/{statusId}';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleFeedGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: FeedResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}/feed'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleFeedGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FeedResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'FeedResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleFeedOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}/feed';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleFollowersGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: FollowersResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}/followers'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleFollowersGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FollowersResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'FollowersResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleFollowersOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}/followers';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleFollowingGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: FollowingResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}/following'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleFollowingGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: FollowingResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'FollowingResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleFollowingOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}/following';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: UserResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: UserResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'UserResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleProfileGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: ProfileResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}/profile'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleProfileGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: ProfileResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'ProfileResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleProfileOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}/profile';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param updateProfileRequest
     * @param {*} [options] Override http request options.
     */
    public usersHandleProfilePost(handle: string, updateProfileRequest: UpdateProfileRequest, options: any = {}): Promise<{ response: http.IncomingMessage; body: Response;  }> {
        const localVarPath = this.basePath + '/users/{handle}/profile'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleProfilePost.');
        }

        // verify required parameter 'updateProfileRequest' is not null or undefined
        if (updateProfileRequest === null || updateProfileRequest === undefined) {
            throw new Error('Required parameter updateProfileRequest was null or undefined when calling usersHandleProfilePost.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateProfileRequest, 'UpdateProfileRequest')
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Response;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Response');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param handle
     * @param {*} [options] Override http request options.
     */
    public usersHandleStoryGet(handle: string, options: any = {}): Promise<{ response: http.IncomingMessage; body: StoryResponse;  }> {
        const localVarPath = this.basePath + '/users/{handle}/story'
            .replace('{' + 'handle' + '}', encodeURIComponent(String(handle)));
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'handle' is not null or undefined
        if (handle === null || handle === undefined) {
            throw new Error('Required parameter handle was null or undefined when calling usersHandleStoryGet.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: StoryResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'StoryResponse');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersHandleStoryOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/{handle}/story';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param {*} [options] Override http request options.
     */
    public usersSignupOptions(options: any = {}): Promise<{ response: http.IncomingMessage; body: Empty;  }> {
        const localVarPath = this.basePath + '/users/signup';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'OPTIONS',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Empty');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
    /**
     *
     * @param signupRequest
     * @param {*} [options] Override http request options.
     */
    public usersSignupPost(signupRequest: SignupRequest, options: any = {}): Promise<{ response: http.IncomingMessage; body: Response;  }> {
        const localVarPath = this.basePath + '/users/signup';
        const localVarQueryParameters: any = {};
        const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        const localVarFormParams: any = {};

        // verify required parameter 'signupRequest' is not null or undefined
        if (signupRequest === null || signupRequest === undefined) {
            throw new Error('Required parameter signupRequest was null or undefined when calling usersSignupPost.');
        }

        (Object as any).assign(localVarHeaderParams, options.headers);

        const localVarUseFormData = false;

        const localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(signupRequest, 'SignupRequest')
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (localVarRequestOptions as any).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Response;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, 'Response');
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response, body });
                    } else {
                        reject({ response, body });
                    }
                }
            });
        });
    }
}
